-- -*- mode: lua; coding: windows-1251-dos -*-

-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:Init(0,0,1024,768)			  
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
     
    xml:InitStatic("back_movie", self)
    xml:InitStatic("background", self)
    xml:InitStatic("fire_movie", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local _ver = xml:InitStatic		("static_version",self)
	local mm						= _G.main_menu.get_main_menu()
	_ver:SetText					("ver. " .. mm:GetGSVer())
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options																											
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	-- load																												
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save																												
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	-- quit																												
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	
	if 	self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
end

function main_menu:OnButton_last_save()
	if (alife() == nil) then
		self:LoadLastSave	();
		return
	end
	
	self.mbox_mode			= 1
	self.message_box:Init	("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	cmd("disconnect")
end

function main_menu:OnMessageQuitWin()
	cmd("quit")
end

function main_menu:OnButton_return_game()
	cmd("main_menu off")
end

function main_menu:OnButton_new_novice_game()
	cmd("g_game_difficulty gd_novice")
	self:StartGame()	
end

function main_menu:OnButton_new_stalker_game()
	cmd("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	cmd("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	cmd("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()	
	if (alife() ~= nil) then
		cmd("disconnect")	
	end
	cmd("start server(all/single/alife/new) client(localhost)")
	cmd("main_menu off")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
--  	self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg = ui_cheat_naxac.cheat_menu()
		self.spawn_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:Dispatch(cmd, param)  --virtual function
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				cmd("main_menu off")
			end
		end

-- Q -------------------------------------------------------------------------
		--- Быстрый выход из игры ---
		if dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		end

-- BACKSPACE -------------------------------------------------------------------------
		--- Завершить игру. Нужно для тестов. ---
		if dik == DIK_keys.DIK_BACK then
			if (alife() ~= nil) then
				cmd("disconnect")	
			end
		end
		
-- T -------------------------------------------------------------------------
		--- Запуск тест-скрипта: "_test_script_pcall.lua". ---
		if dik == DIK_keys.DIK_T then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				self:start_test_script()
				cmd("main_menu off")
			else
				self:start_test_script()
			end
		end

-- P -------------------------------------------------------------------------
		-- Загрузка сохраники для тестов "_save_for_test_.sav", если есть. ---
		if dik == DIK_keys.DIK_P then
			if ui_load_dialog.file_exist("_save_for_test_.sav") then
				if (alife() == nil) then
					cmd("disconnect")
					cmd("start server(".."_save_for_test_".."/single/alife/load) client(localhost)")
				else
					cmd("load ".."_save_for_test_")
				end
			end
		end

-- F1 -------------------------------------------------------------------------
		--- Сохранение в формате: levelname_day_00_time_00_00 --- Взято из OGSE mod. ---
		if dik == DIK_keys.DIK_F1 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				local s_date = ""
				s_date = s_date.."день_"
				s_date = AddTextDigit(s_date, level.get_time_days())
				s_date = s_date.."_время_"
				s_date = AddTextDigit(s_date, level.get_time_hours())
				s_date = s_date.."_"
				s_date = AddTextDigit(s_date, level.get_time_minutes())
				
				local s_level 	= level.name()
				local location 	= tostring(game.translate_string(s_level))
				cmd("main_menu off")
				device():pause(true)
				cmd("save "..s_date.."_"..location)
				device():pause(false)
			end
		end

-- F2 -------------------------------------------------------------------------
		--- Загрузка последнего сохранения. ---
		if dik == DIK_keys.DIK_F2 then
			if (alife() == nil) then
				cmd("disconnect")
				self:LoadLastSave()
			else
				self:LoadLastSave()
			end
		end

-- F8 -------------------------------------------------------------------------
		--- Ускоряем время ---
		if dik == DIK_keys.DIK_F8 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				acc_time()
			end
		end

-- F9 -------------------------------------------------------------------------
		--- Стандартное время ---
		if dik == DIK_keys.DIK_F9 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				ret_time()
			end
		end

-- F10 -------------------------------------------------------------------------
		--- Замедляем время ---
		if dik == DIK_keys.DIK_F10 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				dec_time()
			end
		end

-- F11 ------------------------------------------------------------------------
		--- Смотрим какой сейчас сэт погоды и его секции. ---
		if dik == DIK_keys.DIK_F11 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				show_sect_weather()
				cmd("main_menu off")
			end
		end
		
-- S -------------------------------------------------------------------------
		--- Опция "Сохранить игру". ---
		if dik == DIK_keys.DIK_S then
			self:OnButton_save_clicked()
		end

-- L -------------------------------------------------------------------------
		--- Опция "Загрузить игру". ---
		if dik == DIK_keys.DIK_L then
			self:OnButton_load_clicked()
		end

-- Z -------------------------------------------------------------------------
		--- Спаун-меню --- (by naxac) ---
		if dik == DIK_keys.DIK_Z then
			self:OnButton_load_spawn()
		end

-- N -------------------------------------------------------------------------
		--- NoClip-режим. (свободный полёт) ---
		if dik == DIK_keys.DIK_N then
			if( _noclip )then
				_noclip.ON_OFF()
				cmd("main_menu off")
			end
		end

-------------------------------------------------------------------------------
	end
   
	return true
end

function main_menu:start_test_script()
	log1("~~Start TESTING script!")
	local res, err = pcall(this.start_chunk_from_file)
	log1(res and "~~Finish TESTING script!" or "!!TESTING  >>>  ERROR  >>>  "..err)
	flush_log()
end

function start_chunk_from_file()
    local chunk, err = dofile("..\\gamedata\\scripts\\_test_script_pcall.lua")
    if err then log1("!!TESTING  >>>  ERROR:  "..tostring(err)) end
end

-- Добавляем текст, нужно для сохранения в формате: "levelname_day_00_time_00_00". --
function AddTextDigit(str, dig)
	if (dig > 9) then
		str = str .. dig
	else
		str = str .. "0" .. dig
	end
	return str
end

local k, t = 50, 0;
local default_time_factor = system_ini():r_s32("alife","time_factor") -- текущий тайм-фактор по-умолчанию.
function acc_time()
	t = t + k
	level.set_time_factor(t)
	news_manager.send_tip(db.actor, "%c[25,240,25,25]Таймфактор увеличен до "..t.." ", nil, nil, 5000)
end
function ret_time()
	level.set_time_factor(default_time_factor)
	news_manager.send_tip(db.actor, "%c[0,0,255,25]Таймфактор стандартный, по-умолчанию. ", nil, nil, 5000)
end
function dec_time()
	t = t - k
	if t <= 0 then
		ret_time()
	else
		level.set_time_factor (t)
		news_manager.send_tip(db.actor, "%c[255,240,155,25]Таймфактор уменьшен до "..t.." ", nil, nil, 5000)
	end	
end

-- Смотрим какой сейчас сэт погоды и его секции на экране. --
function show_sect_weather()
    local time_h 		= sr_timer.time2str(level.get_time_hours()) -- текущий игровой час
	local ini 			= system_ini()								-- для чтения конфигов
	local weather 		= level.get_weather() 						-- текущий тип погоды
	local weather_sect 	= ini:r_string("weathers", weather) 		-- секция погоды, соответствующая текущему типу
	local weather_time 	= tostring(time_h)..":00:00"				-- какой текущий час погоды в текущей секции
	
	if ini:section_exist(weather_sect) and ini:line_exist(weather_sect, weather_time) then
		local time_sect = ini:r_string(weather_sect, weather_time) 			-- секция текущей погоды на данный час
		news_manager.send_tip(db.actor, "Сэт погоды    : "..tostring(weather)..
									 "\\nТекущая секция : "..tostring(time_sect).."", nil, nil, 7000)
	else
		news_manager.send_tip(db.actor, "Сэт погоды: "..tostring(weather).."\\nВнмание! \\nТекущая секция погоды отсутствует в сэте!", nil, nil, 7000)
	end 
end 

